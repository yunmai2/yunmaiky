/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHubitusCheckupArgs } from "./CreateHubitusCheckupArgs";
import { UpdateHubitusCheckupArgs } from "./UpdateHubitusCheckupArgs";
import { DeleteHubitusCheckupArgs } from "./DeleteHubitusCheckupArgs";
import { HubitusCheckupFindManyArgs } from "./HubitusCheckupFindManyArgs";
import { HubitusCheckupFindUniqueArgs } from "./HubitusCheckupFindUniqueArgs";
import { HubitusCheckup } from "./HubitusCheckup";
import { User } from "../../user/base/User";
import { HubitusCheckupService } from "../hubitusCheckup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HubitusCheckup)
export class HubitusCheckupResolverBase {
  constructor(
    protected readonly service: HubitusCheckupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HubitusCheckup",
    action: "read",
    possession: "any",
  })
  async _hubitusCheckupsMeta(
    @graphql.Args() args: HubitusCheckupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HubitusCheckup])
  @nestAccessControl.UseRoles({
    resource: "HubitusCheckup",
    action: "read",
    possession: "any",
  })
  async hubitusCheckups(
    @graphql.Args() args: HubitusCheckupFindManyArgs
  ): Promise<HubitusCheckup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HubitusCheckup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HubitusCheckup",
    action: "read",
    possession: "own",
  })
  async hubitusCheckup(
    @graphql.Args() args: HubitusCheckupFindUniqueArgs
  ): Promise<HubitusCheckup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HubitusCheckup)
  @nestAccessControl.UseRoles({
    resource: "HubitusCheckup",
    action: "create",
    possession: "any",
  })
  async createHubitusCheckup(
    @graphql.Args() args: CreateHubitusCheckupArgs
  ): Promise<HubitusCheckup> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HubitusCheckup)
  @nestAccessControl.UseRoles({
    resource: "HubitusCheckup",
    action: "update",
    possession: "any",
  })
  async updateHubitusCheckup(
    @graphql.Args() args: UpdateHubitusCheckupArgs
  ): Promise<HubitusCheckup | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HubitusCheckup)
  @nestAccessControl.UseRoles({
    resource: "HubitusCheckup",
    action: "delete",
    possession: "any",
  })
  async deleteHubitusCheckup(
    @graphql.Args() args: DeleteHubitusCheckupArgs
  ): Promise<HubitusCheckup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: HubitusCheckup): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
